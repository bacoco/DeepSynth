openapi: 3.0.3
info:
  title: {API_TITLE}
  description: {API_DESCRIPTION}
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.example.com/v1
    description: Production server
  - url: http://localhost:8000
    description: Development server

tags:
  - name: {resources}
    description: {RESOURCE} management endpoints

paths:
  /{resources}:
    get:
      summary: List {resources}
      description: Retrieve a paginated list of {resources}
      operationId: list{RESOURCES}
      tags:
        - {resources}
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/{RESOURCE}List'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Create {resource}
      description: Create a new {resource}
      operationId: create{RESOURCE}
      tags:
        - {resources}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/{RESOURCE}Create'
      responses:
        '201':
          description: {RESOURCE} created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/{RESOURCE}'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{resources}/{{id}}:
    get:
      summary: Get {resource} by ID
      description: Retrieve a specific {resource}
      operationId: get{RESOURCE}
      tags:
        - {resources}
      parameters:
        - name: id
          in: path
          required: true
          description: {RESOURCE} ID
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/{RESOURCE}'
        '404':
          description: {RESOURCE} not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update {resource}
      description: Update an existing {resource}
      operationId: update{RESOURCE}
      tags:
        - {resources}
      parameters:
        - name: id
          in: path
          required: true
          description: {RESOURCE} ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/{RESOURCE}Update'
      responses:
        '200':
          description: {RESOURCE} updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/{RESOURCE}'
        '404':
          description: {RESOURCE} not found
        '400':
          description: Invalid input

    delete:
      summary: Delete {resource}
      description: Delete a {resource} by ID
      operationId: delete{RESOURCE}
      tags:
        - {resources}
      parameters:
        - name: id
          in: path
          required: true
          description: {RESOURCE} ID
          schema:
            type: integer
      responses:
        '204':
          description: {RESOURCE} deleted successfully
        '404':
          description: {RESOURCE} not found

components:
  schemas:
    {RESOURCE}:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          description: Unique identifier
        name:
          type: string
          description: {RESOURCE} name
          minLength: 1
          maxLength: 100
        description:
          type: string
          description: {RESOURCE} description
          maxLength: 500
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp

    {RESOURCE}Create:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          maxLength: 500

    {RESOURCE}Update:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          maxLength: 500

    {RESOURCE}List:
      type: object
      required:
        - items
        - total
        - page
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/{RESOURCE}'
        total:
          type: integer
          description: Total number of items
        page:
          type: integer
          description: Current page number
        page_size:
          type: integer
          description: Number of items per page
        pages:
          type: integer
          description: Total number of pages

    Error:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
          description: Error type
        message:
          type: string
          description: Error message
        details:
          type: array
          items:
            type: string
          description: Additional error details

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []
